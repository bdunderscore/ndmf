name: Build Release

on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - '**'

env:
  packageName: "nadena.dev.ndmf"


jobs:
  run-tests:
    needs: [prechecks]
    if: needs.prechecks.outputs.need-new-tag == 'true'
    uses: bdunderscore/ndmf/.github/workflows/gameci.yml@main
    permissions:
      checks: write
      contents: read
    secrets: inherit
  prechecks:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      need-new-tag: ${{ steps.check-tag.outputs.need-new-tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: get version
        id: version
        run: |
          sudo apt-get -y install jq
          version=$(jq -r .version package.json)
          if [ x$version == x ]; then
            echo "Unable to extract version"
            exit 1
          fi
          echo version=$(jq -r .version package.json) >> $GITHUB_OUTPUT
          echo current_version=$(jq -r .version package.json) >> $GITHUB_ENV

      - name: Check if version is tagged
        id: check-tag
        run: |
          if git fetch origin $current_version --depth=1; then
            echo "Version $current_version is already tagged"
            echo "need-new-tag=false" >> $GITHUB_OUTPUT
          else
            echo "Version $current_version is not tagged"
            echo "need-new-tag=true" >> $GITHUB_OUTPUT
          fi

      - name: Verify that this is the first revision with this version
        if: steps.check-tag.outputs.need-new-tag == 'true'
        run: |
          git fetch --unshallow
          git checkout HEAD~ package.json
          if [ "$(jq -r .version package.json)" == "$current_version" ]; then
              echo "Error: Looks like we skipped the version bump commit."
              exit 1
          fi

      - name: Check semver syntax
        if: steps.check-tag.outputs.need-new-tag == 'true'
        id: semver-check
        run: |
          chmod +x .github/workflows/*.sh
          .github/workflows/check-semver-syntax.sh ${{ steps.version.outputs.version }}

      - name: Check tag consistency
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          if [ "${{ steps.version.outputs.version }}" != "${GITHUB_REF##*/}" ]; then
            echo "Version in package.json does not match tag name: ${{ steps.version.outputs.version }} != ${GITHUB_REF##*/}"
            exit 1
          fi

  create-release:
    needs: [prechecks, run-tests]
    runs-on: ubuntu-latest
    if: needs.prechecks.outputs.need-new-tag == 'true' || startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Reexport version
        id: version
        run: |
          echo "version=${{ needs.prechecks.outputs.version }}" >> $GITHUB_ENV
          if [ "x${{ needs.prechecks.outputs.version }}" == "x" ]; then
            echo "Unable to extract version"
            exit 1
          fi

      # Re-check semver syntax in case this is being triggered by a manual tag push
      - name: Check semver syntax
        if: steps.check_tagged.outputs.need_tag == 'true'
        id: semver-check
        run: |
          chmod +x .github/workflows/*.sh
          .github/workflows/check-semver-syntax.sh ${{ needs.prechecks.outputs.version }}

      - name: Check tag consistency
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          if [ "${{ needs.prechecks.outputs.version }}" != "${GITHUB_REF##*/}" ]; then
            echo "Version in package.json does not match tag name: ${{ needs.prechecks.outputs.version }} != ${GITHUB_REF##*/}"
            exit 1
          fi

      - name: Set Environment Variables
        run: |
          echo "zipFile=${{ env.packageName }}-${{ needs.prechecks.outputs.version }}".zip >> $GITHUB_ENV
          echo "unityPackage=${{ env.packageName }}-${{ needs.prechecks.outputs.version }}.unitypackage" >> $GITHUB_ENV

      - name: Create Zip
        run: |
          zip ".github/${{env.zipFile}}" ./* -r -x .github .git '.git/*' '*~/*' '*.ps1*'

      - name: Move zipfile
        run: |
          mv .github/${{env.zipFile}} ${{env.zipFile}}

      - uses: actions/upload-artifact@v4
        with:
          name: package-zip
          path: ${{ env.zipFile }}
          
      - name: Create tag
        if: needs.prechecks.outputs.need-new-tag == 'true'
        run: |
          git config user.name "Github Actions"
          git config user.email "github-actions@nadena.dev"
          git tag ${{ needs.prechecks.outputs.version }}
          git push origin ${{ needs.prechecks.outputs.version }}

      - name: Make Release
        uses: softprops/action-gh-release@da05d552573ad5aba039eaac05058a918a7bf631
        if: needs.prechecks.outputs.need-new-tag == 'true' || startsWith(github.ref, 'refs/tags/')
        with:
          draft: true
          generate_release_notes: true
          tag_name: ${{ needs.prechecks.outputs.version }}
          name: ${{ needs.prechecks.outputs.version }}
          files: |
            ${{ env.zipFile }}
            package.json
